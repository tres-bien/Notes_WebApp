@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Notes_WebApp.Shared;
@using System.Text.RegularExpressions;

@inject IJSRuntime JSRuntime

<h1>Notes</h1>

<div class="mt-4">
    <h2>Create Note</h2>
    <form @onsubmit="CreateNote">
        <div class="form-group">
            <label for="title">Title</label>
            <input type="text" class="form-control" id="title" @bind="newNote.Title" required />
        </div>
        <div class="form-group">
            <label for="content">Content</label>
            <textarea class="form-control" id="content" @bind="newNote.Content" rows="4"></textarea>
        </div>
        <button type="submit" class="btn btn-success">Create</button>
    </form>
</div>

<style>
    .highlight {
        background-color: rgb(159, 160, 208);
        font-weight: bold;
    }
</style>


<div class="mt-4">
    <h2>Search Notes</h2>
    <div class="dropdown-container">
        <input type="text" class="form-control" placeholder="Search by Title or Content" @bind="searchTerm" @oninput="HandleSearchInput" style="width: 600px;" />
        <ul class="dropdown-content" style="@displayStyle">
            @foreach (var item in filteredNotes)
            {
                <li @onclick="() => SelectNoteTitleOrContent(item.Note!)" @key="item.Note!.Id">
                    <span>@(new MarkupString(HighlightSearchTerm(item.Html!, searchTerm)))</span>
                </li>
            }
        </ul>
    </div>
</div>

<div class="mt-5">
    Total Notes: @totalNotes
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="mt-4">
        <table class="table">
            <thead>
                <tr>
                    <th @onclick="SortByTitle" style="cursor: pointer; text-decoration: underline;">Title</th>
                    <th @onclick="SortByDate" style="cursor: pointer; text-decoration: underline;">Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var note in sortedNotes)
                {
                    <tr id="@($"note-{note.Id}")" style="@(note.IsExpanded ? "background-color: lightgray;" : "")">
                        <td>@note.Title</td>
                        <td>@note.Date.ToLocalTime().ToString("MM/dd/yyyy HH:mm:ss")</td>
                        <td>
                            @if (note.IsEditing)
                            {
                                <button class="btn btn-success" @onclick="() => ApplyChanges(note)">Apply Changes</button>
                                <button class="btn btn-secondary ml-2" @onclick="() => CancelEdit(note)">Cancel</button>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="() => ToggleExpand(note)">@(note.IsExpanded ? "Hide" : "Show") Note</button>
                                <button class="btn btn-info ml-2" @onclick="() => StartEdit(note)">Edit</button>
                                <button class="btn btn-danger ml-2" @onclick="() => DeleteNote(note)">Delete</button>
                            }
                        </td>
                    </tr>
                    @if (note.IsExpanded || note.IsEditing)
                    {
                        <tr>
                            <td style="@(note.IsExpanded ? "background-color: lightgray;" : "")" colspan="3">
                                @if (note.IsEditing)
                                {
                                    <div class="form-group">
                                        <label for="editTitle">Title</label>
                                        <input type="text" class="form-control" id="editTitle" @bind="note.Title" required />
                                    </div>
                                    <div class="form-group">
                                        <label for="editContent">Content</label>
                                        <textarea class="form-control" id="editContent" @bind="note.Content" rows="4"></textarea>
                                    </div>
                                }
                                else
                                {
                                    <p>@note.Content</p>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

<script>
    window.scrollToNote = (noteId) => {
        const noteElement = document.getElementById(`note-${noteId}`);
        if (noteElement) {
            noteElement.scrollIntoView({ behavior: "smooth" });
        }
    };
</script>

@code {
    private List<Note> notes = new List<Note>();
    private List<Note> sortedNotes = new List<Note>();
    private Note newNote = new Note();
    private bool isLoading = true;
    private string? errorMessage = null;
    private bool sortByDateAscending = true;
    private bool sortByTitleAscending = true;

    private string searchTerm = "";
    private string searchType = "Title";

    private List<string> noteTitles = new List<string>();

    private List<NoteWithHtml> filteredNotes = new List<NoteWithHtml>();

    private int totalNotes;

    public class NoteWithHtml
    {
        public string? Html { get; set; }
        public Note? Note { get; set; }
    }

    private string displayStyle = "display: none;";

    private Note? noteToExpand;

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString()!;
        SearchNotes();
    }

    private string HighlightSearchTerm(string html, string searchTerm)
    {
        string highlightedHtml = Regex.Replace(
            html,
            Regex.Escape(searchTerm),
            match => $"<span class=\"highlight\">{match.Value}</span>",
            RegexOptions.IgnoreCase
        );

        return highlightedHtml;
    }

    private void UpdateSearchTerm(string searchTerm)
    {
        this.searchTerm = searchTerm;
        SearchNotes();
    }

    private void SearchNotes()
    {
        StringComparison comparison = StringComparison.OrdinalIgnoreCase;

        filteredNotes = notes
            .Where(note =>
                note.Title.IndexOf(searchTerm, comparison) >= 0 ||
                note.Content.IndexOf(searchTerm, comparison) >= 0)
            .Select(note => new NoteWithHtml
                {
                    Html = $"{note.Title} - {note.Content}",
                    Note = note
                })
            .ToList();

        displayStyle = filteredNotes.Count > 0 ? "display: block;" : "display: none;";
    }

    private async Task SelectNoteTitleOrContent(Note selectedNote)
    {
        searchTerm = "";
        noteToExpand = selectedNote;
        displayStyle = "display: none;";

        await JSRuntime.InvokeVoidAsync("scrollToNote", selectedNote.Id);

        ExpandNote(selectedNote);
    }

    private void ExpandNote(Note selectedNote)
    {
        foreach (var note in notes)
        {
            if (note == selectedNote)
            {
                note.IsExpanded = true;
            }
            else
            {
                note.IsExpanded = false;
            }
        }
    }

    [Inject]
    private HttpClient? httpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadNotes();
        totalNotes = notes.Count;
    }


    private async Task LoadNotes()
    {
        isLoading = true;
        try
        {
            notes = await httpClient!.GetFromJsonAsync<List<Note>>("api/Notes")!;
            sortedNotes = new List<Note>(notes!);
            isLoading = false;
            errorMessage = null;
        }
        catch (Exception ex)
        {
            isLoading = false;
            errorMessage = $"An error occurred while loading notes.\n{ex.Message}";
        }
    }

    private void SortByDate()
    {
        if (sortByDateAscending)
        {
            sortedNotes = sortedNotes.OrderBy(note => note.Date).ToList();
        }
        else
        {
            sortedNotes = sortedNotes.OrderByDescending(note => note.Date).ToList();
        }
        sortByDateAscending = !sortByDateAscending;
    }

    private void SortByTitle()
    {
        if (sortByTitleAscending)
        {
            sortedNotes = sortedNotes.OrderBy(note => note.Title).ToList();
        }
        else
        {
            sortedNotes = sortedNotes.OrderByDescending(note => note.Title).ToList();
        }
        sortByTitleAscending = !sortByTitleAscending;
    }

    private async Task CreateNote()
    {
        try
        {
            var response = await httpClient!.PostAsJsonAsync("api/Notes", newNote);
            if (response.IsSuccessStatusCode)
            {
                newNote = new Note();
                await LoadNotes();
            }
            else
            {
                errorMessage = "An error occurred while creating the note.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading notes.\n{ex.Message}";
        }
    }

    private async Task DeleteNote(Note noteToDelete)
    {
        try
        {
            var response = await httpClient!.DeleteAsync($"api/Notes/{noteToDelete.Id}");
            if (response.IsSuccessStatusCode)
            {
                notes.Remove(noteToDelete);
            }
            else
            {
                errorMessage = "An error occurred while deleting the note.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading notes.\n{ex.Message}";
        }
    }

    private void ToggleExpand(Note note)
    {
        note.IsExpanded = !note.IsExpanded;
    }

    private void StartEdit(Note note)
    {
        note.IsEditing = true;
    }

    private void CancelEdit(Note note)
    {
        note.IsEditing = false;
    }

    private async Task ApplyChanges(Note note)
    {
        try
        {
            note.IsEditing = false;
            var response = await httpClient!.PutAsJsonAsync($"api/Notes/{note.Id}", note);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading notes.\n{ex.Message}";
        }
    }
}
